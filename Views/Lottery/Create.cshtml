@model Paper
@using LaLlamaDelBosque.Utils;

@{
    ViewData["Title"] = "Crear Papelito";
    ViewData["CC"] = true;
    var cant = Model.Lottery.Split(",").Count();
    var subsum = Model.Numbers.Sum(x => x.Amount) + Model.Numbers.Sum(x => x.Busted);
    var sum = subsum * cant;
}

<h1 class="display-4">@ViewData["Title"]</h1>

<hr />

<form asp-action="Copy">
    <div class="form-group col-md-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control col-md-2" placeholder="Papelito" name="id">
            <input type="submit" class="btn btn-success" value="Copiar">
        </div>
    </div>
</form>

<form asp-action="Save">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row g-2">
        <div class="form-group col-md-2">
            <label asp-for="Id" class="control-label">Papelito</label>
            <input asp-for="Id" class="form-control" disabled readonly />
        </div>
        <div class="form-group col-md-2">
            <label asp-for="DrawDate" class="control-label">Fecha</label>
            <input asp-for="DrawDate" onchange="redirectToCreate('dateString', 'DrawDate')" type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" />
        </div>
        <div class="form-group col-md-4">
            <label asp-for="SelectedLotteries" class="control-label">Sorteos</label>
            <div class="position-relative">
                <div id="customSelect" class="form-select" onclick="toggleDropdown()">
                    <span id="selectedLotteriesText">Seleccione uno o varios</span>
                </div>


                <!-- UL con checkboxes (se muestra al hacer clic) -->
                <ul id="customDropdown"
                    class="list-group position-absolute w-100"
                    style="z-index: 1000; display: none; max-height: 400px; overflow-y: auto; background: white; border: 1px solid #ced4da; border-top: none;">
                    @if(ViewData["Names"] is IList<Lottery> lotteries)
                    {
                        <li class="list-group-item bg-light">
                            <input type="checkbox"
                                   class="form-check-input me-2"
                                   id="selectAll"
                                   onchange="toggleSelectAll(this)"
                                    @(Model.SelectedLotteries.Count() == lotteries.Count() ? "checked" : "indeterminate") />
                            <label class="form-check-label fw-bold" for="selectAll">Seleccionar todos</label>
                        </li>
                        foreach(var item in lotteries)
                        {
                            <li class="list-group-item">
                                <input type="checkbox"
                                       class="form-check-input child-checkbox me-2"
                                       name="SelectedLotteries"
                                       value="@item.Name"
                                       id="lottery_@item.Order"
                                       onchange="updateSelected()"
                                       @(Model.SelectedLotteries.Contains(item.Name) ? "checked" : "") />
                                <label class="form-check-label" for="lottery_@item.Order">@item.Name</label>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>       
        <div class="form-group col-md-4">
            <label asp-for="ClientId" class="control-label">Cliente</label>
            <select asp-for="ClientId" class="form-control form-select" onchange="redirectToCreate('clientId', 'ClientId', )">
                <option value="-1" selected>Seleccione un nombre</option>
                @if(ViewData["Clients"] is not null)
                {
                    @foreach(var item in ViewData["Clients"] as IList<Client> ?? new List<Client>())
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="d-flex justify-content-end">
         @if (Model.Numbers.Any())
        {
            <input type="submit" value="Crear" class="btn btn-primary m-2" />
            <input type="button" onclick="location.href='@Url.Action("Clear", "Lottery")'" value="Limpiar" class="btn btn-danger m-2" />
        }
    </div>
</form>

@if(Model?.SelectedLotteries.Any() ?? false)
{
    <div class="alert alert-info d-flex align-items-start gap-2 flex-wrap mt-1">
        <span class="fw-bold">
            <i class="bi bi-check-circle-fill me-1"></i> Sorteos seleccionados:
        </span>
        <div class="d-flex flex-wrap gap-1">
            @foreach(var name in Model.SelectedLotteries)
            {
                <span class="badge bg-primary text-light">@name</span>
            }
        </div>
    </div>
    <partial name="_Add" model="new Numbers()"/>
}

@if (Model?.Numbers.Any() ?? false)
{
    <div class="container-fluid mb-2">
        <div class="row">
            <div class="col-lg-8">
                <div class="table-responsive container overflow-auto">
                    <table class="table">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Numero</th>
                                <th>Monto</th>
                                <th>Reventado</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var item in Model.Numbers)
                            {
                                <tr>
                                    <td></td>
                                    <td>@item.Value</td>
                                    <td>@item.Amount</td>
                                    <td>@item.Busted</td>
                                    <td>
                                        <!-- Remove -->
                                        <button type="button" class="btn" onclick="showPartial('removePartial-@Model.Id-@item.Id')">
                                            <span class="material-icons icon icon-danger">delete</span>
                                        </button>
                                    </td>
                                </tr>
                                <tr id="removePartial-@Model.Id-@item.Id">
                                    <td colspan="6">
                                        <partial name="_Remove" model="new LotteryConnectionModel{PaperId= Model.Id, LineId= item.Id??1}" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </div>
            <div class="col-lg-4">
                <div class="card" style="background: linear-gradient(135deg, #3B82F6, #64b5f6);">
                    <div class="card-body">
                        <h2 class="card-title">Resumen</h2>
                        <p class="card-text">Monto Total: @Model.Numbers.Sum(x => x.Amount)</p>
                        <p class="card-text">Reventado Total: @Model.Numbers.Sum(x => x.Busted)</p>
                        <hr>
                        <p class="card-text" style="font-weight: bold; font-size: 1rem;">Total Papelito: @subsum</p>
                        <p class="card-text" style="font-weight: bold; font-size: 1.2rem;">Total General: @sum</p>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript">

        function redirectToCreate(paramName, inputId) {
            const input = document.getElementById(inputId);
            const value = input.value;

            const selectedLotteries = @Html.Raw(Json.Serialize(Model?.Lottery));
            const clientId = '@Model?.ClientId';
            const date = '@Model?.DrawDate.ToString("yyyy-MM-dd")';

            const queryParams = new URLSearchParams();
            queryParams.set(paramName, value);
            queryParams.set('cc', 'true');

            if (paramName !== 'SelectedLotteries') queryParams.set('SelectedLotteries', selectedLotteries);
            if (paramName !== 'clientId') queryParams.set('clientId', clientId);
            if (paramName !== 'dateString') queryParams.set('dateString', date);

            const url = '@Url.Action("Create", "Lottery")' + '?' + queryParams.toString();
            window.location.href = url;
        }

        function setFormat(id, key) {
            if (document.getElementById(id).value != "") {
                if (key !== 8) {
                    document.getElementById(id).addEventListener('input', function (e) {
                        e.target.value = e.target.value.replace(/[^\dA-Z]/g, '').replace(/(.{2})/g, '$1+').trim();
                    });
                }
                else {
                    newText = document.getElementById(id).value.substring(0, document.getElementById(id).value.length - 1);
                    document.getElementById(id).value = newText;
                }
            }
        }

        $(document).ready(function () {
            $('form').submit(function (e) {
                var amount = parseFloat($('#Amount').val());
                var busted = parseFloat($('#Busted').val());

                if (busted > amount) {
                    $('#Busted').siblings('.text-danger').text('El campo no puede ser mayor que el Monto.');
                    $('#Busted').focus();
                    e.preventDefault(); 
                }
                else {
                    $('#Busted').siblings('.text-danger').text('');
                }
            });
        });

        function showPartial(id) {
            var partialDivs = document.querySelectorAll('[id*="Partial"]');
            partialDivs.forEach(function (partialDiv) {
                if (partialDiv.id !== id) {
                    partialDiv.style.display = "none";
                }
            });

            var element = document.getElementById(id);

            if (element.style.display === "none") {
                if (element.tagName === "DIV") {
                    element.style.display = "block";
                } else if (element.tagName === "TR") {
                    element.style.display = "table-row";
                }            
            } else {
                element.style.display = "none";
            }
        }

        // Toggle de visibilidad al hacer clic en el div
        function toggleDropdown() {
            const dropdown = document.getElementById('customDropdown');
            dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        }

        function updateSelected() {
            const dropdown = document.getElementById('customDropdown');
            const checkboxes = dropdown.querySelectorAll('input[name="SelectedLotteries"]');
            const checked = dropdown.querySelectorAll('input[name="SelectedLotteries"]:checked');
            const selectAll = dropdown.querySelector('#selectAll');
            const values = Array.from(checked).map(cb => cb.value);

            // Crear input temporal con valores
            const tempInput = document.createElement('input');
            tempInput.type = 'hidden';
            tempInput.id = 'tempSelectedLotteries';
            tempInput.value = Array.from(checked).map(cb => cb.value).join(',');
            document.body.appendChild(tempInput);

            // Redirigir usando el input temporal
            redirectToCreate("SelectedLotteries", "tempSelectedLotteries");
        }

        function toggleSelectAll(masterCheckbox) {
            const dropdown = document.getElementById('customDropdown');
            const checkboxes = dropdown.querySelectorAll('input[name="SelectedLotteries"]');

            checkboxes.forEach(cb => cb.checked = masterCheckbox.checked);
            updateSelected();
        }

        // Cerrar el dropdown al hacer clic fuera
        document.addEventListener('click', function (event) {
            const dropdown = document.getElementById('customDropdown');
            const customSelect = document.getElementById('customSelect');

            if (!customSelect.contains(event.target) && !dropdown.contains(event.target)) {
                dropdown.style.display = 'none';
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            const checkboxes = document.querySelectorAll('.child-checkbox');
            const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;
            const selectAll = document.getElementById('selectAll');

            selectAll.checked = checkedCount === checkboxes.length;
            selectAll.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;

            // Mostrar el dropdown si viene keepSelection=true en la URL
            const urlParams = new URLSearchParams(window.location.search);
            const cc = urlParams.get('cc');

            if (cc === 'true' && checkedCount > 0) {
                const dropdown = document.getElementById('customDropdown');
                dropdown.style.display = 'block';
            }
        });

    </script>
}
